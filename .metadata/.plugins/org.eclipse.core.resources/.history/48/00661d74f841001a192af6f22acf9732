
public class MyHeap <E extends Comparable<E>> {

	private E[] heap;
	private int size;
	
	public MyHeap() {
		this.heap = (E[]) new Comparable[20];
		this.size = 0;
	}
	
	public MyHeap(E[] datos) {   //Los datos se pasan al heap aqui o en el heapify????????????????????????????????????????????????***********
		//hacer heapify
		this.heap=datos;
		heapify(heap);
		this.size = datos.length;   //suponemos que siempre nos pasan el arreglo lleno
	}
	
	private void heapify(E[] datos) {                                 // return(pos-1)/2        2 * pos + (left ? 1: 2)
		//poner el arreglo con las condiciones de heap
		int current = heap.length / 2 - 1;
		int left;
		int right;
		while(current >= 0) {
			left = 2 * current + 1;
			right = 2 * current + 2;
			if(left < heap.length && right < heap.length) {
				if(heap[current].compareTo(heap[left])<0 || heap[current].compareTo(heap[right])<0) {
					if(heap[left].compareTo(heap[right])>0) {
						swap(left, current);
						fixBelow(left, heap);
					}
					else{
						swap(right, current);
						fixBelow(right, heap);
						
					}
				}
			}
			else if(left < heap.length && right >= heap.length) {
				if(heap[current].compareTo(heap[left])<0) {
						swap(left, current);
						fixBelow(left, heap);
				}
			}
			current--;
		}
		
	}
	
	private void fixBelow(int current,E[] heap) {
		int left;
		int right;
		boolean bandera = true;
		while(heap[current] != null && bandera != false) {
			bandera = false;
			left = 2 * current + 1;
			right = 2 * current + 2;
			
			if(left < heap.length && right < heap.length) {
				if(heap[current].compareTo(heap[left])<0 || heap[current].compareTo(heap[right])<0) {
					if(heap[left].compareTo(heap[right])>0) {
						swap(left, current);
						current = left;
						bandera = true;
					}
					else{
						swap(right, current);
						current = right ;
						bandera = true;
					}
				}
			}
			else if(left < heap.length && right >= heap.length) {
				if(heap[current].compareTo(heap[left])<0) {
						swap(left, current);
						current = left;
						bandera = true;
				}
			}
		
		}
		return;
	}       
	
	
	public void push(E dato) {
		if(this.size == this.heap.length) {   //Crecer el arreglo
			E[] aux = (E[]) new Comparable[this.heap.length + 20];
			for (int i = 0; i < this.heap.length; i++) {
				aux[i] = this.heap[i];
			}
			this.heap = aux;
		}
		this.heap[this.size] = dato;   
		
//-----------------------------------------------------------------------------------------
		int current = this.size;
		while( current >= 1) {
			if(this.heap[(current-1)/2].compareTo(this.heap[current]) < 0) {
				swap((current-1)/2,current);
			}
			current = (current-1)/2;
		}
//-----------------------------------------------------------------------------------------		

		this.size++;
	}
	
	
	
	
	private void swap(int pos1, int pos2) {
		E aux = this.heap[pos1];
		this.heap[pos1] = this.heap[pos2];
		this.heap[pos2] = aux;
	}
	
	
	
	public void pop(E dato) {
		
		this.heap[this.size] = dato;   
		
//-----------------------------------------------------------------------------------------
		int current = this.size;
		while( current >= 1) {
			if(this.heap[(current-1)/2].compareTo(this.heap[current]) < 0) {
				swap((current-1)/2,current);
			}
			current = (current-1)/2;
		}
//-----------------------------------------------------------------------------------------		

		this.size++;
	}
	
	public static void main(String[] args) {
	    Integer[] datos = {12,3,8,15,20,1};
		//Integer[] datos = {15,60,72,70,56,32,62,92,45,30,71,100,45,79};
		//Integer[] datos = {44,42,35,33,31,19,27,10,26,14};
		MyHeap<Integer> heap_1 = new MyHeap<Integer>(datos);
		
		//heap.push(38);
		//heap.push(20);
		/*
		heap_1.push(25);
		for (int i = 0; i < datos.length; i++) {
			System.out.println(datos[i]);
		}
		
		System.out.println("size= " + heap_1.size);
		
		heap_1.push(38);
		*/
		for (int i = 0; i < heap_1.heap.length; i++) {
			System.out.println(heap_1.heap[i]);
		}
		System.out.println("size= " + heap_1.size);
		
		
	}
	
	
}
