/*
 Autor: Linda Nayeli Abundis Lopez   A01636416
 Nombre de la clase: MyHeap.java
 Fecha: 03 de noviembre de 2019
 Comentarios: hacer el heapify fue lo más complicado y tardado
 */


public class Pruebas<E extends Comparable<E>> {
	
	private E[] heap;
	private int size;

//-------------------------------------------------------------------------------------------------------------------Constructor default
	public Pruebas() {
		//super();  //Para llamar a la clase padre
		this.size = 0;
		this.heap = (E[]) new Comparable[127];
	}

//-------------------------------------------------------------------------------------------------------------------Constructor(E[ ])
	public Pruebas(E[] array) {
		this();     //Para cuando llamas a la misma funcion adentro
		this.size = array.length;
		while(this.heap.length <this.size) {
			this.heap = (E[]) new Comparable[this.heap.length*2];
		}
		for(int i = 0;i<size;i++) {
			this.heap[i] = array[i];
		}
		
		for(int j=size/2-1; j>=0; j--) {
			this.heapify(j);
		}
		
	}
	

//-------------------------------------------------------------------------------------------------------------------insert(E)
	public void insert(E value) {
		if(isFull()) {
			throw new IndexOutOfBoundsException("Heap is full");
		}
		heap[size] = value;
		fixHeapAbove(size);
		this.size++;
	}
	
//-------------------------------------------------------------------------------------------------------------------delete( )

	public E delete() {
		if(isEmpty()) {
			throw new NullPointerException("Heap is empty");
		}
		
		E root = this.heap[0];
		this.heap[0] = this.heap[this.size-1];
		fixHeapBelow(0,size-1);
		this.size--;
		return root;
	}

//-------------------------------------------------------------------------------------------------------------------isEmpty( )
	public boolean isEmpty() {
		return this.size == 0;
	}
	
//-------------------------------------------------------------------------------------------------------------------size( ) 
	public int size() {
		return this.size; 
	}
	
//-------------------------------------------------------------------------------------------------------------------toString( )
	public String toString() {
		String res = "";
		for(int i=0;i<size;i++) {
			res += this.heap[i] + ",";
		}
		return res;
	}
	
//-------------------------------------------------------------------------------------------------------------------AUXILIARES
	private void heapify(int pos) {
		
		if(pos*2+2 < size) {
			int max = getMax(pos*2+1, pos*2+2);
			
			if(this.heap[pos].compareTo(heap[max])<0) {
				E aux = heap[max];
				this.heap[max] = this.heap[pos];
				this.heap[pos] = aux;
			}
			
			this.heapify(pos*2+1);
			this.heapify(pos*2+2);
			
		} else if(pos*2+1<size) {
			
			if(this.heap[pos].compareTo(this.heap[pos*2+1])<0) {
				E aux = heap[pos];
				this.heap[pos] = this.heap[pos*2+1];
				this.heap[pos*2+1] = aux;
			}
		} 
	}

	
	private int getMax(int num_1, int num_2) {
		if(this.heap[num_1].compareTo(this.heap[num_2])>=0) {
			return num_1;
		} else {
			return num_2;
		}
	}
	
	
	public boolean isFull() {
		return this.size == heap.length;
	}
	
	
	public int getParent(int pos) {
		return(pos-1)/2;  //Como uso enteros se redondea hacia abajo automaticamente
		
	}
	
	
	public int getChild(int pos, boolean left) {
		return 2 * pos + (left ? 1: 2);
	}
	
	
	private void fixHeapAbove(int pos) {
		E newValue = heap[pos];
		
		while(pos > 0 &&  newValue.compareTo(heap[getParent(pos)])>0) {
			heap[pos] =heap[getParent(pos)];
			pos = getParent(pos);
		}
		
		heap[pos] = newValue;
	}
	
	
	private void fixHeapBelow(int pos, int new_size) {
		int childToSwap;
		
		while(pos <= new_size) {
			int leftChild = getChild(pos,true);
			int rightChild = getChild(pos,false);
			
			if(leftChild <=new_size) {
				if(rightChild > new_size) {
					childToSwap = leftChild;
				}else {
					childToSwap = (heap[leftChild].compareTo(heap[rightChild])>0  ? leftChild : rightChild);
				}
				if(heap[pos].compareTo(heap[childToSwap])<0){
					E aux = heap[pos];
					heap[pos] = heap[childToSwap];
					heap[childToSwap] = aux;
				}else {
					break;
				}
				pos = childToSwap;
			}else {
				break;
			}
		}
	}
	
			
//-------------------------------------------------------------------------------------------------------------------MAIN
	public static void main(String[] args) {
		/*
		Integer[] array = {15,60,72,70,56,32,62,92,45,30,65,100,45,70};
		MyHeap<Integer> heap = new MyHeap<Integer>(array);
		System.out.println(heap.toString());
		heap.delete();
		System.out.println(heap.toString());
		heap.insert(92);
		System.out.println(heap.toString());
		
		heapify(array);
		*/
		
		Integer[] datos = {15,60,72,70,56,32,62,92,45,30,71,100,45,79};
		Pruebas<Integer> heap = new Pruebas<Integer>(datos);
		for (int i = 0; i < datos.length; i++) {
			System.out.println(datos[i]);
		}
		
	}	
}



